
# Resources for updating the DNS entry to point to newly-spun-up VMs.

data "aws_iam_policy_document" "dns_lambda_assume_role" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "dns_lambda" {
  name               = "dns_lambda_role"
  assume_role_policy = data.aws_iam_policy_document.dns_lambda_assume_role.json
}

resource "aws_cloudwatch_log_group" "dns_lambda" {
  name              = "/aws/lambda/${aws_lambda_function.dns_lambda.function_name}"
  retention_in_days = var.log_retention
}

data "aws_iam_policy_document" "dns_lambda" {
  statement {
    actions = [
      "ec2:Describe*",
      "route53:*"
    ]
    resources = ["*"]
  }

  statement {
    actions = [
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      # "logs:CreateLogGroup"
    ]
    resources = ["arn:aws:logs:*:*:*"]
  }
}

resource "aws_iam_policy" "dns_lambda" {
  name   = "lambdacraft-dns-update-policy"
  policy = data.aws_iam_policy_document.actions.json
}

resource "aws_iam_role_policy_attachment" "dns_lambda" {
  role       = aws_iam_role.game_task.name
  policy_arn = aws_iam_policy.dns_lambda.arn
}

data "archive_file" "dns_lambda" {
  type        = "zip"
  source_file = "${path.module}/lambdas/update_dns.py"
  output_path = "${path.module}/lambdas/update_dns.zip"
}

resource "aws_lambda_function" "dns_lambda" {
  # TODO: source_code_hash appears to change when generated by different people, but it shouldn't.
  function_name    = "dns_lambda"
  filename         = data.archive_file.dns_lambda.output_path
  handler          = "update_dns.handler"
  source_code_hash = data.archive_file.dns_lambda.output_base64sha256
  runtime          = "python3.9"
  role             = aws_iam_role.dns_lambda.arn
  environment {
    variables = {
      hosted_zone_id = var.hosted_zone_id,
      hostname       = var.hostname,
    }
  }
}

resource "aws_cloudwatch_event_rule" "vm_started" {
  name        = "vm_started"
  description = "Fires when the Minecraft server VM starts."

  event_pattern = jsonencode({
    source = ["aws.ec2"],
    detail-type = ["EC2 Instance State-change Notification"],
    detail = {
      state = ["pending"],
    }
  })
}

resource "aws_cloudwatch_event_target" "dns_lambda" {
  rule      = aws_cloudwatch_event_rule.vm_started.name
  target_id = "dns_lambda"
  arn       = aws_lambda_function.dns_lambda.arn
}
